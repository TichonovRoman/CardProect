{"version":3,"file":"static/js/250.bf4475d5.chunk.js","mappings":"uPACA,EAAwB,8BAAxB,EAA6D,6BAA7D,EAAsG,kCAAtG,EAA6J,2CAA7J,EAA+M,6BAA/M,EAAqP,+BAArP,EAA4R,8BAA5R,EAAuU,mC,iDCQ1TA,EAAc,oCAEdC,EAAiB,SAACC,GAAD,OAA4BF,EAAYG,KAAKD,IA2E3E,EAzEuB,WAEnB,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAGXC,EAAoBC,EAAAA,KAAaC,MAAM,CACzCR,MAAOO,EAAAA,KAAaP,MAAM,yFAAwBS,SAAS,wEAc/D,OACI,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,UACI,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACD,eAAgB,SAA3B,UACI,gBAAKE,UAAWC,EAAhB,UACI,SAAC,KAAD,CACIC,cAAe,CACXhB,MAAO,IAEXiB,gBAAc,EACdC,SAfE,SAACC,GACnBjB,GAASkB,EAAAA,EAAAA,IAAOD,EAAOnB,MAAOI,KAediB,iBAAkBf,EANtB,SAQK,gBAAGa,EAAH,EAAGA,OAAQG,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,QAASC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAA7E,OACG,kBAAMV,SAAUS,EAAcb,UAAWC,EAAzC,WAEI,gBAAKD,UAAWC,EAAhB,4BACA,gBAAKD,UAAWC,EAAhB,qCAEA,eAAGc,MAAO,CAAEC,UAAW,QAAvB,WACI,kBAAOC,QAAO,QAAd,oBAAsC,mBACtC,kBACIjB,UAAW,QACXkB,KAAI,QACJC,KAAI,QACJC,SAAUV,EACVW,OAAQV,EACRW,MAAOjB,EAAOnB,WAGrBuB,EAAQvB,OAASsB,EAAOtB,QAAS,cAAGc,UAAWC,EAAd,SAA6BO,EAAOtB,SAEtE,cAAGc,UAAWC,EAAd,iFACA,4BAEI,mBAAQD,UAAWC,EACfsB,UAAWX,IAAYE,EACvBC,MAAO,CAAES,QAAUZ,GAAYE,EAAgB,IAAR,OACvCI,KAAI,SAHR,gCAOA,cAAGlB,UAAWC,EAAmBwB,KAAK,UAAtC","sources":["webpack://my-app/./src/components/Registration/ForgotPassword/ForgotPassword.module.css?b781","components/Registration/ForgotPassword/ForgotPassword.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"block\":\"ForgotPassword_block__cNh0I\",\"form\":\"ForgotPassword_form__J6+Zb\",\"incubator\":\"ForgotPassword_incubator__0Zn06\",\"ForgotYourPassword\":\"ForgotPassword_ForgotYourPassword__Luxq8\",\"text\":\"ForgotPassword_text__QGn5G\",\"Button\":\"ForgotPassword_Button__LSonH\",\"error\":\"ForgotPassword_error__DvAtN\",\"logginLink\":\"ForgotPassword_logginLink__LfKpJ\"};","import React from 'react';\r\nimport { Formik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport styles from './ForgotPassword.module.css'\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Grid } from '@mui/material';\r\nimport { forgot } from '../../Bll/auth-reducer';\r\n\r\nexport const emailRegExp = /^[\\w][\\w-.]*@[\\w-]+\\.[a-z]{2,7}$/i;\r\n\r\nexport const emailValidator = (email: string): boolean => emailRegExp.test(email); // true - valid\r\n\r\nconst ForgotPassword = () => {\r\n\r\n    const dispatch = useDispatch<any>()\r\n    const navigate = useNavigate()\r\n\r\n\r\n    const validationsSchema = yup.object().shape({\r\n        email: yup.string().email('Введите верный email').required('Обязательно'),\r\n    })\r\n\r\n\r\n    type SubmitHandlerType = {\r\n        email: string\r\n    }\r\n\r\n    const submitHandler = (values: SubmitHandlerType) => {\r\n        dispatch(forgot(values.email, navigate))\r\n        // values.resetForm()\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <div className={styles.block}>\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: ''\r\n                        }}\r\n                        validateOnBlur\r\n                        onSubmit={submitHandler}\r\n                        validationSchema={validationsSchema}\r\n                    >\r\n                        {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => (\r\n                            <form onSubmit={handleSubmit} className={styles.form}>\r\n\r\n                                <div className={styles.incubator}> It-incubator</div>\r\n                                <div className={styles.ForgotYourPassword}> Forgot your password?</div>\r\n\r\n                                <p style={{ marginTop: '77px' }}>\r\n                                    <label htmlFor={`email`}>Email</label><br />\r\n                                    <input\r\n                                        className={'input'}\r\n                                        type={`email`}\r\n                                        name={`email`}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.email}\r\n                                    />\r\n                                </p>\r\n                                {touched.email && errors.email && <p className={styles.error}>{errors.email}</p>}\r\n\r\n                                <p className={styles.text} >Enter your email address and we will send you further instructions</p>\r\n                                <div>\r\n\r\n                                    <button className={styles.Button}\r\n                                        disabled={!isValid || !dirty}\r\n                                        style={{ opacity: !isValid || !dirty ? '0.5' : '1' }}\r\n                                        type={`submit`}\r\n                                    >Send Instructions\r\n                                    </button>\r\n\r\n                                    <a className={styles.logginLink} href='#/login' > Try logging in </a>\r\n                                </div>\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ForgotPassword\r\n\r\n"],"names":["emailRegExp","emailValidator","email","test","dispatch","useDispatch","navigate","useNavigate","validationsSchema","yup","shape","required","Grid","container","justifyContent","item","className","styles","initialValues","validateOnBlur","onSubmit","values","forgot","validationSchema","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","style","marginTop","htmlFor","type","name","onChange","onBlur","value","disabled","opacity","href"],"sourceRoot":""}