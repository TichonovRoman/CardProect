{"version":3,"file":"static/js/955.8b682153.chunk.js","mappings":"6LACA,EAAoC,wCAApC,EAAmF,2BAAnF,EAA0H,gCAA1H,EAAmK,6BAAnK,EAA+M,mCAA/M,EAAmQ,qCAAnQ,EAAgT,4B,2DCyIhT,EA/HqB,WAEjB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAaC,EAAAA,EAAAA,KAAyC,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,YAEhF,GAAsBC,EAAAA,EAAAA,WAAS,GAA/B,eAAOC,EAAP,KAAYC,EAAZ,KACMC,EAAc,WAEZD,GADAD,IAQFG,EAAoBC,EAAAA,KAAaC,MAAM,CACzCC,MAAOF,EAAAA,KAAaE,MAAM,yFAAwBC,SAAS,sEAC3DC,SAAUJ,EAAAA,KAAaK,UAAU,4GAAuBF,SAAS,sEACjEG,gBAAiBN,EAAAA,KAAaO,MAAM,CAACP,EAAAA,GAAQ,aAAc,4GAAuBG,SAAS,wEAc/F,OAAIb,GACO,SAAC,KAAD,CAAUkB,GAAE,cAInB,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,UACI,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACD,eAAgB,SAA3B,UACI,gBAAKE,UAAWC,EAAhB,UACI,SAAC,KAAD,CACIC,cAAe,CACXb,MAAO,GACPE,SAAU,GACVE,gBAAiB,IAErBU,gBAAc,EACdC,SApBE,SAACC,GACnBhC,GAASiC,EAAAA,EAAAA,IAASD,EAAOhB,MAAOgB,EAAOd,YAoBvBgB,iBAAkBrB,EARtB,SAUK,gBAAGmB,EAAH,EAAGA,OAAQG,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,QAASC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAA7E,OACG,kBAAMV,SAAUS,EAAcb,UAAWC,EAAzC,WAEI,gBAAKD,UAAWC,EAAhB,4BACA,gBAAKD,UAAWC,EAAhB,uBAEA,eAAGc,MAAO,CAAEC,UAAW,QAAvB,WACI,kBAAOC,QAAO,QAAd,oBAAsC,mBACtC,kBACIjB,UAAW,QACXkB,KAAI,QACJC,KAAI,QACJC,SAAUV,EACVW,OAAQV,EACRW,MAAOjB,EAAOhB,WAGrBoB,EAAQpB,OAASmB,EAAOnB,QAAS,cAAGW,UAAWC,EAAd,SAA6BO,EAAOnB,SAEtE,eAAG0B,MAAO,CAAEC,UAAW,QAAvB,WACI,kBAAOC,QAAO,aAAd,uBAA8C,mBAC9C,kBACIjB,UAAW,QACXkB,KAAMnC,EAAG,WAAgB,OACzBoC,KAAI,WACJC,SAAUV,EACVW,OAAQV,EACRW,MAAOjB,EAAOd,YAElB,iBAAMgC,QAAStC,EAAf,SACKF,GAAM,SAAC,MAAD,KAAY,SAAC,MAAD,SAG1B0B,EAAQlB,UAAYiB,EAAOjB,WAAY,cAAGS,UAAWC,EAAd,SAA6BO,EAAOjB,YAE5E,eAAGwB,MAAO,CAAEC,UAAW,QAAvB,WACI,kBAAOC,QAAO,kBAAd,+BAA2D,mBAC3D,kBACIjB,UAAW,QACXkB,KAAMnC,EAAG,WAAgB,OACzBoC,KAAI,kBACJC,SAAUV,EACVW,OAAQV,EACRW,MAAOjB,EAAOZ,mBAElB,iBAAM8B,QAAStC,EAAf,SACKF,GAAM,SAAC,MAAD,KAAY,SAAC,MAAD,SAG1B0B,EAAQhB,iBAAmBe,EAAOf,kBAC/B,cAAGO,UAAWC,EAAd,SAA6BO,EAAOf,mBAExC,4BACI,mBAAQO,UAAWC,EACfsB,QAAS,kBAAMhD,EAAS,WACxB2C,KAAK,SAFT,qBAMA,mBAAQlB,UAAWC,EACfuB,UAAWZ,IAAYE,EACvBC,MAAO,CAAEU,QAAUb,GAAYE,EAAgB,IAAR,OACvCI,KAAI,SAHR","sources":["webpack://my-app/./src/components/Registration/Registration.module.css?b21b","components/Registration/Registration.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registrationBlock\":\"Registration_registrationBlock__sdK54\",\"form\":\"Registration_form__RCWA6\",\"incubator\":\"Registration_incubator__kleaG\",\"signUp\":\"Registration_signUp__fBy3Y\",\"cancelButton\":\"Registration_cancelButton__XeX+R\",\"registerButton\":\"Registration_registerButton__oPcmV\",\"error\":\"Registration_error__cv+bi\"};","import React, { useState } from 'react';\r\nimport { Formik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport styles from './Registration.module.css'\r\nimport { FaEye, FaEyeSlash } from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { register } from '../Bll/auth-reducer';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nimport { Grid } from '@mui/material';\r\nimport { AppRootReducerType } from '../Bll/store';\r\n\r\nconst Registration = () => {\r\n\r\n    const dispatch = useDispatch<any>()\r\n    const navigate = useNavigate()\r\n    \r\n    const isLoggedIn = useSelector<AppRootReducerType, boolean>(state => state.auth.isLogged)\r\n\r\n    const [eye, setEye] = useState(true)\r\n    const handleClick = () => {\r\n        if (eye) {\r\n            setEye(false);\r\n        } else {\r\n            setEye(true)\r\n        }\r\n    }\r\n\r\n\r\n    const validationsSchema = yup.object().shape({\r\n        email: yup.string().email('Введите верный email').required('Обязательно'),\r\n        password: yup.string().typeError('Должно быть строкой').required('Обязательно'),\r\n        confirmPassword: yup.string().oneOf([yup.ref('password')], 'Пароли не совпадают').required('Обязательно'),\r\n    })\r\n\r\n    type SubmitHandlerType = {\r\n        email: string\r\n        password: string\r\n        confirmPassword: string\r\n    }\r\n\r\n    const submitHandler = (values: SubmitHandlerType) => {\r\n        dispatch(register(values.email, values.password))\r\n    }\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={`/profile`} />\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <div className={styles.registrationBlock}>\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: '',\r\n                            password: '',\r\n                            confirmPassword: ''\r\n                        }}\r\n                        validateOnBlur\r\n                        onSubmit={submitHandler}\r\n                        validationSchema={validationsSchema}\r\n                    >\r\n                        {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => (\r\n                            <form onSubmit={handleSubmit} className={styles.form}>\r\n\r\n                                <div className={styles.incubator}> It-incubator</div>\r\n                                <div className={styles.signUp}> Sign Up</div>\r\n\r\n                                <p style={{ marginTop: '77px' }}>\r\n                                    <label htmlFor={`email`}>Email</label><br />\r\n                                    <input\r\n                                        className={'input'}\r\n                                        type={`email`}\r\n                                        name={`email`}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.email}\r\n                                    />\r\n                                </p>\r\n                                {touched.email && errors.email && <p className={styles.error}>{errors.email}</p>}\r\n\r\n                                <p style={{ marginTop: '24px' }}>\r\n                                    <label htmlFor={`secondName`}>password</label><br />\r\n                                    <input\r\n                                        className={'input'}\r\n                                        type={eye ? `password` : 'text'}\r\n                                        name={`password`}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.password}\r\n                                    />\r\n                                    <span onClick={handleClick}>\r\n                                        {eye ? <FaEye /> : <FaEyeSlash />}\r\n                                    </span>\r\n                                </p>\r\n                                {touched.password && errors.password && <p className={styles.error}>{errors.password}</p>}\r\n\r\n                                <p style={{ marginTop: '24px' }}>\r\n                                    <label htmlFor={`confirmPassword`}>Confirm password</label><br />\r\n                                    <input\r\n                                        className={'input'}\r\n                                        type={eye ? `password` : 'text'}\r\n                                        name={`confirmPassword`}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        value={values.confirmPassword}\r\n                                    />\r\n                                    <span onClick={handleClick}>\r\n                                        {eye ? <FaEye /> : <FaEyeSlash />}\r\n                                    </span>\r\n                                </p>\r\n                                {touched.confirmPassword && errors.confirmPassword &&\r\n                                    <p className={styles.error}>{errors.confirmPassword}</p>}\r\n\r\n                                <div>\r\n                                    <button className={styles.cancelButton}\r\n                                        onClick={() => navigate(\"/login\")}\r\n                                        type=\"button\"\r\n                                    >Cancel\r\n                                    </button>\r\n\r\n                                    <button className={styles.registerButton}\r\n                                        disabled={!isValid || !dirty}\r\n                                        style={{ opacity: !isValid || !dirty ? '0.5' : '1' }}\r\n                                        type={`submit`}\r\n                                    >Register\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Registration\r\n\r\n"],"names":["dispatch","useDispatch","navigate","useNavigate","isLoggedIn","useSelector","state","auth","isLogged","useState","eye","setEye","handleClick","validationsSchema","yup","shape","email","required","password","typeError","confirmPassword","oneOf","to","Grid","container","justifyContent","item","className","styles","initialValues","validateOnBlur","onSubmit","values","register","validationSchema","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","style","marginTop","htmlFor","type","name","onChange","onBlur","value","onClick","disabled","opacity"],"sourceRoot":""}