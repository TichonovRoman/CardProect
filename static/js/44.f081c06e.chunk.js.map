{"version":3,"file":"static/js/44.f081c06e.chunk.js","mappings":"4LACA,EAAsB,mBAAtB,EAAsD,0BAAtD,EAA4F,yBAA5F,EAAiI,yBAAjI,EAAwK,2BAAxK,EAA4M,sBAA5M,EAAgP,2BAAhP,EAAqR,uB,oJCqIrR,EAvHc,WAEV,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,KAAyC,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,YAEhF,GAAsBC,EAAAA,EAAAA,WAAS,GAA/B,eAAOC,EAAP,KAAYC,EAAZ,KAUMC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAAoD,GAW1D,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAASM,OAAS,IAChCF,EAAOJ,SAAW,gCAFlBI,EAAOJ,SAAW,WAIfI,GAEXG,SAAU,SAAAJ,GAENjB,GAASsB,EAAAA,EAAAA,IAAQL,OAGzB,OAAIf,GACAqB,QAAQC,IAAI,UACL,SAAC,KAAD,CAAUC,GAAE,eAInB,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,UACI,SAACF,EAAA,GAAD,CAAMG,MAAI,EAACD,eAAgB,SAA3B,UACI,iBAAMP,SAAUX,EAAOoB,aAAvB,UACI,SAACC,EAAA,EAAD,WACI,gBAAKC,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,4BACA,gBAAKD,UAAWC,EAAhB,uBACA,UAACC,EAAA,EAAD,CAAWF,UAAWC,EAAtB,WACI,SAACE,EAAA,GAAD,QAAWH,UAAWC,EAAaG,MAAM,QACrCC,OAAO,SACPC,QAAQ,YACJ5B,EAAO6B,cAAc,WAGzB7B,EAAOQ,OAAOL,OACVH,EAAO8B,QAAQ3B,OACf,gBAAK4B,MAAO,CAAEC,MAAO,OAArB,SAA+BhC,EAAOQ,OAAOL,QAC3C,MAGV,SAACsB,EAAA,GAAD,gBAAWH,UAAWC,EAAaU,KAAMnC,EAAG,WAAgB,OACxD4B,MAAM,WACNC,OAAO,SACPC,QAAQ,YACJ5B,EAAO6B,cAAc,aAJ7B,IAKIK,WAAY,CACRC,cACI,SAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,UACI,SAACC,EAAA,EAAD,CACI,aAAW,6BACXC,QAvEhC,WAEZxC,GADAD,IAoEwC,SAIKA,GAAM,SAAC0C,EAAA,EAAD,KAAoB,SAACC,EAAA,EAAD,YAQ3CzC,EAAOQ,OAAOJ,UACVJ,EAAO8B,QAAQ1B,UACf,gBAAK2B,MAAO,CAAEC,MAAO,OAArB,SAA+BhC,EAAOQ,OAAOJ,WAC3C,MAGV,SAACsC,EAAA,EAAD,CAAkBhB,MAAO,cACrBiB,SACI,gBAAKZ,MAAO,CAAEa,WAAY,QAA1B,UACI,SAACC,EAAA,EAAD,CACIC,SAAU9C,EAAO+C,aACjBC,MAAOhD,EAAOO,OAAOF,WACrB4C,KAAK,oBAErB,cAAGC,KAAK,cAAR,iCACA,mBAAQ5B,UAAWC,EAAnB,oBAGA,gBAAKD,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASR,GAAI,gBAAb","sources":["webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"Login_box__bT2rN\",\"inputField\":\"Login_inputField__zT20v\",\"FormGroup\":\"Login_FormGroup__BWOTZ\",\"TextField\":\"Login_TextField__h++r6\",\"itIncubator\":\"Login_itIncubator__mlLN8\",\"signIn\":\"Login_signIn__Zi4lI\",\"loginButton\":\"Login_loginButton__u2cfE\",\"account\":\"Login_account__H8x+d\"};","import React, { useState } from 'react'\r\nimport { useFormik } from \"formik\";\r\nimport s from './Login.module.css';\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField } from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"./login-reducer\";\r\nimport { LoginParamsType } from \"../api/cards-api\";\r\nimport { AppRootReducerType } from \"../Bll/store\";\r\nimport {Navigate, NavLink} from \"react-router-dom\";\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const dispatch = useDispatch<any>()\r\n    const isLoggedIn = useSelector<AppRootReducerType, boolean>(state => state.auth.isLogged)\r\n\r\n    const [eye, setEye] = useState(true)\r\n    const handleClick = () => {\r\n        if (eye) {\r\n            setEye(false);\r\n        } else {\r\n            setEye(true)\r\n        }\r\n    }\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            // alert(JSON.stringify(values));\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        console.log('login')\r\n        return <Navigate to={`/profile`} />\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl >\r\n                        <div className={s.box}>\r\n                            <div className={s.inputField}>\r\n                                <div className={s.itIncubator}> It-incubator</div>\r\n                                <div className={s.signIn}> Sign Up</div>\r\n                                <FormGroup className={s.FormGroup}>\r\n                                    <TextField className={s.TextField} label=\"Email\"\r\n                                        margin=\"normal\"\r\n                                        variant=\"standard\"\r\n                                        {...formik.getFieldProps('email')} />\r\n\r\n                                    {\r\n                                        formik.errors.email &&\r\n                                            formik.touched.email ?\r\n                                            <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                                            : null\r\n                                    }\r\n\r\n                                    <TextField className={s.TextField} type={eye ? `password` : 'text'}\r\n                                        label=\"Password\"\r\n                                        margin=\"normal\"\r\n                                        variant=\"standard\"\r\n                                        {...formik.getFieldProps('password')}\r\n                                        InputProps={{\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        aria-label=\"toggle password visibility\"\r\n                                                        onClick={handleClick}\r\n                                                    >\r\n                                                        {eye ? <VisibilityOff /> : <Visibility />}\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            )\r\n                                        }}\r\n\r\n                                    />\r\n                                    {\r\n                                        formik.errors.password &&\r\n                                            formik.touched.password ?\r\n                                            <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                                            : null\r\n                                    }\r\n\r\n                                    <FormControlLabel label={'Remember me'}\r\n                                        control={\r\n                                            <div style={{ marginLeft: \"20px\" }}>\r\n                                                <Checkbox\r\n                                                    onChange={formik.handleChange}\r\n                                                    value={formik.values.rememberMe}\r\n                                                    name=\"rememberMe\" />\r\n                                            </div>} />\r\n                                    <a href='#/forgotPas' > forgot password? </a>\r\n                                    <button className={s.loginButton}>\r\n                                        Login\r\n                                    </button>\r\n                                    <div className={s.account}>\r\n                                        <NavLink to={'/registration'}>Don`t have an account?</NavLink>\r\n                                    </div>\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Login\r\n"],"names":["dispatch","useDispatch","isLoggedIn","useSelector","state","auth","isLogged","useState","eye","setEye","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","loginTC","console","log","to","Grid","container","justifyContent","item","handleSubmit","FormControl","className","s","FormGroup","TextField","label","margin","variant","getFieldProps","touched","style","color","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","VisibilityOff","Visibility","FormControlLabel","control","marginLeft","Checkbox","onChange","handleChange","value","name","href"],"sourceRoot":""}